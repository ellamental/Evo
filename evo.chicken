;; Evo
;; Written for:  Chicken Scheme - Version 4.5.5
;; Copyright:  Jack Trades 2010
;; Licence:  Not yet licenced
;; (load "evo.chicken")
;; 
;; Evo is an evolutionary search based function optimizer.  Evo provides an
;; interface for defining new modules and functions as well as an evolutionary 
;; programming based method for optimizing those functions.
;; 
;; 
;; 
;; TODO:
;; GUI
;; - Split off GUI into seperate file.
;; - Check for duplicate names when saving function (popup error dialog)
;; - draw-func-window and draw-new-func-window are almost identical refactor this
;; - Change defaults in draw-new-func-window.  Defaults should specify the
;;   format of the field or the label should do so.
;; - Expand draw-module-window to show/update module-meta data
;; - Write gene-pool viewer to add/delete/view/modify gene-pools
;; - Add test-module button to evolve currently selected module.
;; 
;; Module
;; - Write infinate loop to test modules
;; - Save module to disk after testing
;; - Allow loading of user defined functions as symbols. Now the prototype of a
;;   function is either (+ (num . x) ...) or ((lambda (x y) ...) (num . x) ...)
;;   (user-defined (num . x) ...) should replace ((lambda ...) ...) 
;; 
;; Function
;; - Allow a function with a 'best but no 'tests to use the 'best value as the 
;;   test when evolving new functions
;; - Add crossover/mutation/conditional combination and other forms of breeding
;; - Measure speed/memory/size as well as correctness in fitness testing
;; - Import modules from module-meta data when generating/testing nodes
;;   The easiest way of doing this would be to append the module 'modules to 
;;   the meta-alist passed to make-func.  However doing this should not save
;;   the module 'modules in each function to disk, rather it should append the
;;   data each time the modules are loaded.
;; - Write compare-fitness function that will be used by submit-to-pools
;;   instead of (> fitness-results (pool-tag 'min-correct (car pools)))
;; 
;; Data Storage
;; - Decide if the fitness of a node should be stored with it in gene pool.
;;     Pros: Don't have to retest; can provide pool avg fitness
;;     Cons: Extra storage, more complicated design
;; - gene-pools should store min correctness, max speed, max memory, max size
;;   and max gene-pool size
;; 
;; General
;; - A function should not have to be well-formed everything should work on 
;;   any function even if there are only one or two attributes defined.  For
;;   example: A function with only name, prototype and tests should still
;;   work, instead of crashing the GUI/crashing testing/etc
;; - The naming conventions in this code have to be changed to make more sense.
;;   For example there should not be a tag, modules, in a function.  It should
;;   be something more descriptive like function-set or similar.
;;
;; Later
;; - Add a (use-evo 'math) to allow users to use modules in outside code
;; - Make a converter that reads regular Scheme code and builds up evo modules.
;; - Optimize testing loop.
;;___________________________________________________________________________;;

(require-extension tk)        ;; GUI
(require-extension posix)     ;; GUI - Building a list of modules
(require-extension srfi-1)

(define (make-module name)
  (define filename (if (string? name) (conc "project/" name)
                                      (conc "project/" (symbol->string name))))

  (define (load-module)
    (define f (open-input-file filename))
    (define mod (read f))
    (close-input-port f)
    mod)

  (define (store-module)
    (define f (open-output-file filename))
    (pretty-print (cons module-meta module) f)
    (close-output-port f))
  
  (define loaded-module (load-module))
  (define module-meta (car loaded-module))
  (define module (cdr loaded-module))

  (define (get-meta tag)
    (cdr (assoc tag module-meta)))
  
  (define (add-func definition)
    (set! module (cons definition module)))

  (define (get-func func-name)
    (assoc func-name module))

  (define (list-of-names)
    (map (lambda (x) (car x)) module))
  
  (define (prototypes)
    (map (lambda (f) (cons (cdr (assoc 'type (cdr f)))
                           (cons (cdr (assoc 'best (cdr f))) 
                                 (cdr (assoc 'proto (cdr f))))))
         module))
  
  (define (eval-times count)
    (map (lambda (f) ((make-func f) 'eval-times count)) module))
  
  (define (dispatch m . arguments)
    (cond ((equal? m 'name) name)
          ((equal? m 'module) module)
          ((equal? m 'list-of-names) (list-of-names))
          ((equal? m 'store-module) (store-module))
          ((equal? m 'add-func) (apply add-func arguments))
          ((equal? m 'get-func) (apply get-func arguments))
          ((equal? m 'eval-times) (apply eval-times arguments))
          ((equal? m 'prototypes) (prototypes))
          ((equal? m 'get-meta) (apply get-meta arguments))
          ((equal? m 'module-meta) module-meta)
  ))
  dispatch
)



(define (make-func meta-alist)
  (define name (car meta-alist))
  (define meta (cdr meta-alist))

  (define (set-tag tag value)
    (if (assoc tag meta)
        (set-cdr! (assoc tag meta) value)
        (set! meta (cons (cons tag value) meta))))
  
  (define (append-tag tag value)
    (define t (assoc tag meta))
    (if t
        (set-cdr! t (cons value (cdr t)))
        (set! meta (cons (cons tag value) meta))))
  
  (define (tag-value tag)
    (cdr (assoc tag meta)))

  ;; Split an alist ((type . data) ...) into ((type data data ...) (type ...))
  (define (sort-types types-list)
    (define types (hash-table-keys (alist->hash-table types-list)))
    (map (lambda (type)
           (cons type (filter-map (lambda (t) (and (equal? (car t) type) (cdr t)))
                                  types-list)))
         types))

  (define (load-function-set)
    (sort-types (apply append (map (lambda (m) (let ((mod (make-module m)))
                                                 (mod 'prototypes)))
                                   (tag-value 'modules)))))

  ;; TODO: create funcs and terms only when required
  (define funcs (load-function-set))
  (define terms '((num 0 1) (bool #t #f)))

  
  (define arg-types (sort-types (tag-value 'proto)))
  (define args (map cdr (tag-value 'proto)))

  (define first-test-args (caar (tag-value 'tests)))
  (define first-test-result (cdar (tag-value 'tests)))
  (define number-of-tests (length (tag-value 'tests)))
  (define gene-pool (tag-value 'gene-pool))

  (define (choice alist #!optional (type 'any))
    (define (random-choice l)
      (list-ref l (random (length l))))
    (if (equal? type 'any)
        (random-choice (cdr (random-choice alist)))
        (random-choice (cdr (assoc type alist)))))

  (define (choose-func #!optional (type 'any))
    (choice funcs type))
  
  (define (choose-term #!optional (type 'any))
    (if (> (random 100) 30)
        (choice arg-types type)
        (choice terms type)))
  
  
  (define (random-node #!optional (type 'any) (func-prob 70))
    (if (> (random 100) func-prob)
      (choose-term type)
      (let ((f (choose-func type)))
        (cons (car f)
              (map (lambda (a) (random-node (car a) (- func-prob 10))) (cdr f))))))
    
  
  ;; not used
  (define (eval-node node arguments)
    (condition-case (apply (eval (list 'lambda args node)) arguments)
      [(exn) (print 'error)]))

  
  (define (eval-times count)
    (if (= count 0)
        (print "Finished")
        (begin 
          (quick-test (random-node))
          (eval-times (- count 1)))))
  
  
  (define (quick-test node)
    (if (equal? (condition-case 
                  (apply (eval (list 'lambda args node)) first-test-args)
                  [(exn) (void)])
                first-test-result)
        (submit-to-gene-pool node (fitness node))
        #f))
  
  
  (define (fitness node)
    (define node-proc (eval (list 'lambda args node)))
    (/ (length 
         (filter (lambda (test) 
                   (equal? (condition-case (apply node-proc (car test)) 
                                           [(exn) (void)])
                           (cdr test)))
                 (tag-value 'tests)))
       number-of-tests))
  
  (define (pool-tag tag pool)
    (cdr (assoc tag (car pool))))
  
  (define (submit-to-gene-pool node fitness-results)
    (define (tournament-selection pool)
      (define cell-number (random (length (cdr pool))))
      (define cell (drop (cdr pool) cell-number))
      (define incumbant (car cell))
      (define i-results (fitness incumbant))
      (if (> fitness-results i-results)
        (begin
          (set-car! cell node)  
          (print "Battle won!  Setting new node." #\newline
                  "Old fitness: " i-results #\newline
                  "New fitness: " fitness-results #\newline
                  "Old node: " incumbant #\newline
                  "New node:  " node #\newline
                  "Pool node: " (list-ref (cdr pool) cell-number)))
        (print "Battle lost!")))

    (define (submit-for-storage pool)
      (if (> (length (cdr pool)) (pool-tag 'max-pool-size pool))
          (tournament-selection pool)
          (set-cdr! pool (cons node (cdr pool)))))
    
    (define (submit-to-pools pools)
      (if (null? pools)
          #f
          (if (> fitness-results (pool-tag 'min-correct (car pools)))
              (submit-for-storage (car pools))
              (submit-to-pools (cdr pools)))))
    
    (submit-to-pools gene-pool))
  
  
  (define (dispatch m . arguments)
    (cond ((equal? m 'name) name)
          ((equal? m 'meta) meta)
          ((equal? m 'set-tag) (apply set-tag arguments))
          ((equal? m 'append-tag) (apply append-tag arguments))
          ((equal? m 'tag-value) (apply tag-value arguments))
          ((equal? m 'funcs) funcs)
          ((equal? m 'eval-times) (apply eval-times arguments))
          ((equal? m 'random-node) (random-node))
          ((equal? m 'gene-pool) gene-pool)
          ((equal? m 'arg-types) arg-types)
          ((equal? m 'sort-types) (apply sort-types arguments))
  ))
  dispatch
)



;; database-browser
(define (db) 
  (define mod #f)
  (define func #f)
  (define current-frame #f)
  (define font-type "Helvetica 16")

  (start-tk)
  
  (tk 'configure #:width 640)
  (tk 'configure #:height 480)
  (tk/wm 'minsize tk 640 480)
  
  (define main-menu (tk 'create-widget 'menu))
  (define module-menu (main-menu 'create-widget 'menu))
  (define function-menu (main-menu 'create-widget 'menu))

  (tk 'configure #:menu main-menu)

  (main-menu 'add 'cascade #:label 'Modules #:menu module-menu)
  (main-menu 'add 'cascade #:label 'Functions #:menu function-menu)

  
  (define (set-module name)
    (set! mod (make-module name))
    (function-menu 'delete 0 'end)
    (populate-function-menu)
    (draw-module-window))

  
  (define (set-function name)
    (set! func (make-func (mod 'get-func name)))
    (draw-func-window))

  
  (define (populate-function-menu)
    (function-menu 'add 'command #:label "New Function" #:command
      (lambda () (draw-new-func-window)))
    (function-menu 'add 'separator)
    (map (lambda (name)
          (function-menu 'add 'command #:label name
            #:command (lambda () (set-function name))))
         (mod 'list-of-names)))

  
  (define (populate-module-menu)
    (module-menu 'add 'command #:label "New Module" #:command
      (lambda () 
        (let* ((dialog (tk 'create-widget 'toplevel))
               (lab (dialog 'create-widget 'label #:text "Name:"))
               (ent (dialog 'create-widget 'entry))
               (but (dialog 'create-widget 'button #:text "Submit" #:command
                      (lambda () 
                        (let* ((name (ent 'get))
                              (f (open-output-file (conc "project/" name))))
                          (write '() f)
                          (close-output-port f)
                          (module-menu 'add 'command #:label name
                            #:command (lambda () (set-module name)))
                          (set-module name)
                          (tk/destroy dialog))))))
          (tk/pack lab)
          (tk/pack ent)
          (tk/pack but)
          )))
    (module-menu 'add 'separator)
    (map (lambda (name)
          (module-menu 'add 'command #:label name
            #:command (lambda () (set-module name))))
        (directory "project/")))
          

  (define (reset-current-frame)
    (tk/destroy current-frame)
    (set! current-frame (tk 'create-widget 'frame #:width 640 #:height 480)))


  (define (make-entry parent label default)
    (define frame (parent 'create-widget 'labelframe #:text label #:font font-type))
    (define ent (frame 'create-widget 'entry #:font font-type))
    (ent 'insert 'end default)
    (tk/grid ent)
    
    (define (dispatch m . arguments)
      (cond ((equal? m 'frame) frame)
            ((equal? m 'get) (ent 'get))
        ))
    dispatch)
  
  (define (make-text parent label default height)
    (define frame (parent 'create-widget 'labelframe #:text label #:font font-type))
    (define ent (frame 'create-widget 'text #:font font-type #:height height #:width 50))
    (ent 'insert 'end default)
    (tk/grid ent)
    
    (define (dispatch m . arguments)
      (cond ((equal? m 'frame) frame)
            ((equal? m 'get) (ent 'get 1.0 'end))
        ))
    dispatch)
  
  
  (define (draw-module-window)
    (reset-current-frame)
    (define name (make-entry current-frame "Name" (mod 'name)))
    (tk/grid (name 'frame) #:row 0)
    
    (define funcs (make-entry current-frame "Functions" (mod 'list-of-names)))
    (tk/grid (funcs 'frame) #:row 1)
    
    (define modules (make-entry current-frame "Modules Available When Testing" (mod 'get-meta 'modules)))
    (tk/grid (modules 'frame) #:row 2)
    
    (tk/pack current-frame))
  

  (define (draw-func-window)
    (reset-current-frame)
    (define name (make-entry current-frame "Name" (func 'name))) ;;(make-prototype-area current-frame))
    (tk/grid (name 'frame) #:row 0 #:column 0)
    
    (define type (make-entry current-frame "Return Type" (func 'tag-value 'type)))
    (tk/grid (type 'frame) #:row 1 #:column 0)
    
    (define proto (make-entry current-frame "Prototype" (string-join (map ->string (func 'tag-value 'proto)) " ")))
    (tk/grid (proto 'frame) #:row 2 #:column 0)
            
    (define doc (make-text current-frame "Docstring" (func 'tag-value 'doc) 2))
    (tk/grid (doc 'frame) #:row 0 #:column 1)
    
    (define modules (make-text current-frame "Modules Available When Testing" (func 'tag-value 'modules) 2))
    (tk/grid (modules 'frame) #:row 1 #:column 1)
    
    (define tests (make-text current-frame "Tests" (string-join (map ->string (func 'tag-value 'tests)) "\n") 5))
    (tk/grid (tests 'frame) #:row 3 #:column 0)
    
    (define pool (make-text current-frame "Gene Pool" (func 'tag-value 'gene-pool) 5))
    (tk/grid (pool 'frame) #:row 4 #:column 0)
    
    (define scratch (make-text current-frame "Scratch Pad" (func 'tag-value 'best) 12))
    (tk/grid (scratch 'frame) #:row 3 #:column 1 #:rowspan 2)
        
    (define save (current-frame 'create-widget 'button #:text "Save" #:command
      (lambda ()
        (if (equal? (string->symbol (name 'get)) (func 'name))
            (begin
              (func 'set-tag 'type (string->symbol (type 'get)))
              (func 'set-tag 'proto (read (open-input-string (conc "(" (proto 'get) ")"))))
              (func 'set-tag 'doc (string-trim-right (doc 'get) #\newline))                      ;; string-trim-right comes from the tk package
              (func 'set-tag 'modules (read (open-input-string (conc "(" (modules 'get) ")"))))
              (func 'set-tag 'tests (read (open-input-string (conc "(" (tests 'get) ")"))))
              (mod 'store-module))
            (begin
              (mod 'add-func 
                (list (string->symbol (name 'get))
                      (cons 'type (string->symbol (type 'get)))
                      (cons 'proto (read (open-input-string (conc "(" (proto 'get) ")"))))
                      (cons 'doc (string-trim-right (doc 'get) #\newline))                       ;; string-trim-right comes from the tk package
                      (cons 'modules (read (open-input-string (conc "(" (modules 'get) ")"))))
                      (cons 'tests (read (open-input-string (conc "(" (tests 'get) ")"))))
                      (cons 'gene-pool (read (open-input-string (conc "(" (pool 'get) ")"))))))
              (mod 'store-module))))))
    (tk/grid save #:row 5 #:column 1)
    
    (tk/pack current-frame))

  (define (draw-new-func-window)
    (reset-current-frame)
    (define name (make-entry current-frame "Name" "")) ;;(make-prototype-area current-frame))
    (tk/grid (name 'frame) #:row 0 #:column 0)
    
    (define type (make-entry current-frame "Return Type" "num"))
    (tk/grid (type 'frame) #:row 1 #:column 0)
    
    (define proto (make-entry current-frame "Prototype" "(num . x) (num . y)"))
    (tk/grid (proto 'frame) #:row 2 #:column 0)
            
    (define doc (make-text current-frame "Docstring" "Divide x by y" 2))
    (tk/grid (doc 'frame) #:row 0 #:column 1)
    
    (define modules (make-text current-frame "Modules Available When Testing" "math cond" 2))
    (tk/grid (modules 'frame) #:row 1 #:column 1)
    
    (define tests (make-text current-frame "Tests" "((6 2) . 3)" 5))
    (tk/grid (tests 'frame) #:row 3 #:column 0)
    
    (define pool (make-text current-frame "Gene Pool" "(0.7) (0.5)" 5))
    (tk/grid (pool 'frame) #:row 4 #:column 0)
    
    (define scratch (make-text current-frame "Scratch Pad" "/" 12))
    (tk/grid (scratch 'frame) #:row 3 #:column 1 #:rowspan 2)
        
    (define save (current-frame 'create-widget 'button #:text "Save" #:command
      (lambda ()
        (mod 'add-func
          (list (string->symbol (name 'get))
                (cons 'type (string->symbol (type 'get)))
                (cons 'proto (read (open-input-string (conc "(" (proto 'get) ")"))))
                (cons 'doc (string-trim-right (doc 'get) #\newline))                      ;; string-trim-right comes from the tk package
                (cons 'modules (read (open-input-string (conc "(" (modules 'get) ")"))))
                (cons 'tests (read (open-input-string (conc "(" (tests 'get) ")"))))
                (cons 'gene-pool (read (open-input-string (conc "(" (pool 'get) ")"))))
                (cons 'best (read (open-input-string (scratch 'get))))))
        (mod 'store-module)
        (function-menu 'add 'command #:label (string->symbol (name 'get))
          #:command (lambda () (set-function (string->symbol (name 'get)))))

        )))
    (tk/grid save #:row 5 #:column 1)
    
    (tk/pack current-frame))

  
  (populate-module-menu)

  (event-loop)
)



(define m (make-module 'math))
(time (m 'eval-times 100))

(define f (make-func (m 'get-func 'plus)))
;(time (f 'eval-times 1000))
;(length (car (f 'gene-pool)))

;(db)
