;;__________________________________________________________________________;;
;; evo
;; evo.chicken
;; (load "/media/DATA/code/evo/evo.chicken")
;;
;; TODO:
;; Store and Retrieve from disk
;; Utilize type information in func defs for more efficient searching
;; Define core functions and store in database
;; Crossover and Mutation
;; Gene-pool tools (add tests, add functions, etc)
;; GUI-based module/func tools (tests, prototypes, view gene-pool, etc)
;;__________________________________________________________________________;;

(require-extension srfi-42)  ;; list-ec
(require-extension srfi-18)  ;; (time->seconds (current-time))

(define (seconds) (time->seconds (current-time)))

(define (func meta-hash)
  
  (define (choice #!rest lst)
    (define all (apply append lst))
    (list-ref all (random (length all))))

  
  ;; Get and Store function to disk given name
  ;; meta-hash will be retrieved and set by these functions
  (define (get-func name) #f)
  (define (store-func name) #f)
  
  (define meta meta-hash)    ;; will eventually be: (get-func function-name))
  
  ;; Set and Retrieve tags and values
  (define (tag-value t)
    (cdr (assoc t meta)))
  (define (set-tag tag value) #f)

  ;; Create and Eval Functions
  (define (make-func node)
    (list 'lambda (tag-value 'args) node))
  (define (eval-func lmbda arguments)
    (condition-case (apply (eval lmbda) arguments) [(exn) (void)]))

  
  (define funcs (tag-value 'funcs))
  (define terms (tag-value 'terms))
  (define args (tag-value 'args))
  (define (rand-func) (choice funcs))
  (define (rand-term) (choice args terms))
  
  ;; Random Node Selection and Generation
  (define (random-node probability)
    (if (> (random 100) probability)
      (rand-term)
      (let ((f (rand-func)))
        (cons (car f)
              (list-ec (: i (length (cdr f))) (random-node (- probability 10)))))))

  (define (random-func)
    (make-func (random-node 80)))
  
  (define (random-gene)
    (vector-ref (tag-value 'gene-pool) (random (vector-length (tag-value 'gene-pool)))))
  (define (random-gene-node)
    (define (rand-node gene) #f)
    (rand-node (random-gene)))
  
  
  ;; Testing
  (define (test-one f test)
    (define start (seconds))
    (define t (if (equal? (eval-func f (car test)) (cdr test)) #t #f))
    (define end (seconds))
    (list t (- end start)))
  
  (define (fitness f)
    (define results (let loop ((tests (tag-value 'tests)) (results '()))
                      (if (null? tests) results
                        (loop (cdr tests)
                              (cons (test-one f (car tests)) results)))))
    (define correctness (/ (length (filter (lambda (x) (equal? (car x) #t)) results))
                           (length (tag-value 'tests))))
    (define average-runtime (/ (fold (lambda (n tot) (+ (cadr n) tot)) 0 results)
                               (length results)))
    (list correctness average-runtime))
    
  
  
  (define (test-once f test-args test-result)
    (if (equal? (eval-func f test-args) test-result) #t #f))

  ;; Test Loops
  (define (test-times count #!optional (func-gen random-func) (test test-once) (success store))
    (define test-args (caar (tag-value 'tests)))
    (define test-result (cdar (tag-value 'tests)))
    (define (eval-loop count)
      (let ((f (func-gen)))
        (if (= 0 count)
          (print "Finished")
          (if (test f test-args test-result)
              (begin
                (success f)
                (eval-loop (- count 1)))
              (eval-loop (- count 1))))))
    (eval-loop count))
  
  
  ;; Storing Functions in Gene Pool
  (define (store f)
    (define fit (fitness f))
    
    (define (submit-to-pool pool)
      (if (eval-func (car pool) (list fit))
          (begin (set-cdr! pool (cons f (cdr pool))) #t)
          #f))
    
    (define (submit-loop pools)
      (if (null? pools) #f
          (if (submit-to-pool (car pools)) #t
              (submit-loop (cdr pools)))))
        
    (submit-loop (tag-value 'gene-pool)))
  
  ;; Prototype
  (define (make-prototype)
    (if (symbol? (tag-value 'best))
        (cons (tag-value 'best) (tag-value 'args))
        (cons (eval (tag-value 'best)) (tag-value 'args))))
  
  
  ;; Dispatch
  (define (dispatch m . arguments)
    (cond ((equal? m 'tag-value) (apply tag-value arguments))
          ((equal? m 'set-tag) (apply set-tag arguments))
          ((equal? m 'test) (apply test-times arguments))
          ((equal? m 'make-prototype) (make-prototype))))
  dispatch
)


;;Ideal def-module; for now must supply tags for all meta-data (tag name data)

;; (def-module name
;;   (function-set terminal-set)
;;   
;;   (def (func-name arg arg-2)
;;     ("docstring - if the first elem of list is a string it is a docstring
;;       Other attributes are optional, defaults are used if not supplied.
;;       This list should be accessed as an a-list, even (docstring string)"
;;       (tests '(((func-name 3 4) 7)  ;; (name args) test or 
;;                ((3 4) 7)))          ;; (args) test are both appropriate
;;       (funcs (+ - / *)))            ;; add or remove functions from function-set
;;     ;; A working prototype does not have to be supplied.
;;     ;; If it is it becomes the function's (best )
;;     ;; If no tests are supplied it becomes the first test.
;;     (+ arg arg-2)))

(define-syntax tag
  (syntax-rules ()
    ((tag name data)
      (cons 'name data))
    ((tag name data ...)
      (cons 'name '(data ...)))))

(define-syntax def-module
  (syntax-rules ()
    ((def-module mod-name (funcs terms) defs ...)
      (begin
        (define function-set 'funcs)
        (define terminal-set 'terms)
        (list defs ...)))))

(define-syntax def
  (syntax-rules ()
    ((def (func-name arguments ...) meta ...)
      (list (tag name 'func-name)
            (tag args (list 'arguments ...))
            (tag funcs function-set)
            (tag terms terminal-set)
            (tag gene-pool '( ((lambda (f) (if (> (car f) .9) f #f)) . ()) 
                              ((lambda (f) (if (> (car f) .7) f #f)) . ()) 
                              ((lambda (f) (if (> (car f) .4) f #f)) . ()) ))
            meta ...))))


;;__________________________________________________________________________;;
;; Loading and Testing Modules
;; These would normally be stored and loaded from disk
;;__________________________________________________________________________;;


(define (load-module module-name)
  (define (get-module)
    (cdr (assoc module-name modules)))
  (define module (map (lambda (f) (func f)) (get-module))))
  

(define (load-module-prototypes module-name)
  (define module (load-module module-name))  

  (define (make-proto f)
    (define fun (f 'tag-value 'best))
    (define ags (f 'tag-value 'args))
    (if (symbol? fun)
        (cons fun ags)
        (cons (eval fun) ags)))

  (define (funcs)
    (map (lambda (f) (make-proto f)) module))
  (funcs))
 

(define (test-module module-name)
  (define module (load-module module-name))
  
  module)



;;__________________________________________________________________________;;
;; Modules
;; These would normally be stored and loaded from disk
;;__________________________________________________________________________;;

(define modules (alist->hash-table (list

(cons 'core-cond
(def-module conditionals
  (#f #f)
  (def (if any:test any:consequent any:alternate)
    (tag best 'if))
  (def (and any:1 any:2)
    (tag best 'and))
  (def (or any:1 any:2)
    (tag best 'or))
  (def (not any)
    (tag best 'not))
))

(cons 'core-lists
(def-module lists
  (#f #f)
  (def (car lst)
    (tag best 'car))
  (def (cdr lst)
    (tag best 'cdr))
  (def (length lst)
    (tag best 'length))
  (def (list-ref lst int)
    (tag best 'list-ref))
  (def (member any lst)
    (tag best 'member))
))

(cons 'core-loops
(def-module loops
  (#f #f)
  (def (map fun lst)
    (tag best 'map))
  (def (fold fun any lst)
    (tag best 'fold))
  (def (reduce fun any lst)
    (tag best 'reduce))
))

(cons 'core-math
(def-module math
  (#f #f)
  (def (+ num num)
    (tag best '+))
  (def (- num num)
    (tag best '-))
  (def (* num num)
    (tag best '*))
  (def (/ num num)
    (tag best '/))
))

(cons 'core-comp
(def-module comp
  (#f #f)
  (def (equal? any any)
    (tag best 'equal?))
  (def (< num num)
    (tag best '<))
  (def (> num num)
    (tag best '>))
))
)))






(define mod-test
(def-module test
  (((+ num num) (- num num) (< num num) (> num num) (if t c a))
   (#t #f 0 1))
  
  (def (med x y z)
    (tag doc
      "Docstring")
    (tag tests
      ((5 3 7) . 5)
      ((9 7 3) . 7)
      ((9 3 6) . 6)
      ((3 7 5) . 5))
    (tag best
      '(lambda (x y z)
        (if (> x y)
            (if (> x z)
                (if (> y z) y z)
                x)
            (if (> x z)
                x
                (if (> y z) z y))))))
  
  (def (plus x y)
    (tag doc "docstring")
    (tag tests 
      ((3 4) . 7)
      ((7 2) . 9)))
  )
)



(define t (test-module mod-test))
(define c (load-module mod-cond))

(define a (car t))
(define b (c 'funcs))

(time (a 'test 10000))












;; Writing Modules
;;   A human-written module definition should simply be converted into the
;;   data structure used to store modules/funcs with sensible default values.
;; Modifying Modules/Funcs
;;   All funcs should be modifiable after creation.
;;     Add/Remove tests
;;     Add/Edit docstrings
;;     Add/Remove available functions
;;     Add user written code into gene-pool
;;     Add/Modify/Remove containers
;; Testing Funcs
;;   Should be done automatically and run in background at all times
;;   Modifications to the testing system is done through the func objects
;; Using Modules/Funcs
;;   Load only the 'best' functions for each definition.
;;   Define name as module.module.name




;; func storage model
;;_____________________;;

;; name         cons
;; 
;; prototype    (cons any lst)
;; 
;; tests        (((cons 1 '()) '(1)) ((cons 1 '(2 3)) '(1 2 3)))
;; 
;; funcs        ( (+ num num)  (- num num)
;;                (* num num)  (= num num)
;;                (car lst)    (cdr lst)
;;                (if t c a))
;; 
;; terms        (#t #f pi)  ;; or function with no args
;; 
;; best-func    (lambda (any:o lst:l) (cons any:o lst:l))
;; 
;; gene-pool    (List of programs that have passed one or more tests.)
;;
;; fitness-rules = Traits most sought in this function (space, speed...)

;; name
;; The name is the symbol that will be registered by this function upon loading
;; (note that the name will most assuredly be prefixed with a module name as well).
;; The name is slightly redundant as it is also present within the prototype.
;; 
;; prototype
;; The prototype of a function is a mockup of how you would call the function.
;; The prototype's purpose is to convey information about the arguments to the 
;; function.  It can signal arbitrary arguments (+ num:1 ...) as well as give 
;; type information to the function building routines.  
;; 
;; tests
;; The test suite determines the fitness of any generated function.  Newly
;; generated functions are tested against the suite to determine admittance to 
;; the gene-pool.  Tests are stored as (args answer) pairs and will likely be
;; generated by a testing function that allows more readable format such as 
;; (test 
;;   (< 3 4) >>> #t
;;   (< 4 3) >>> #f)
;; 
;; funcs
;; The function set available when generating new functions.  Each function in
;; the function set is stored as a prototype and as such offers the generator
;; a way of type checking the arguments.
;; 
;; terms
;; The terminal set available when generating new functions.  Terminals can 
;; be constants such as #t, '() and pi, or they can be functions which take 
;; no arguments (as a 0-arity func can not grow the tree).
;; 
;; best-func
;; The best, fully test-compliant, function in the gene pool.  If there is no
;; fully test-compliant function in the gene pool best-func will return some
;; sort of "not implemented".  This is the function that will be called when
;; used in other code and can be pre-compiled.
;; 
;; gene-pool
;; The gene pool is where correct functions are saved.  It is from this pool 
;; that the functions for manipulating genes get their genes.



;; Breeding
;; 
;; Random:  A random node is generated.
;; Interfunction:  A function is chosen from the gene pool and nodes of its tree
;;   are swapped and mutated.
;; Crossover:  Two functions are chosen and random nodes are swapped.
;; Assimilation:  A function is chosen and a random node is swapped with a 
;;   function from the gene-pool.
;; Conditional Combination:  Two partially correct functions are combined under
;;   a conditional like (if (test ...) (func-a ...) (func-b ...))

